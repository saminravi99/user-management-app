# Docker Compose - User Management Application
# 5 Services: Nginx, Frontend, Backend, MongoDB, Redis

services:
  # ===========================================
  # NGINX - Reverse Proxy
  # Routes: /api/* → backend, / → frontend
  # ===========================================
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # ===========================================
  # FRONTEND - Next.js Application
  # ===========================================
  frontend:
    build:
      context: ./user-management-frontend
      dockerfile: Dockerfile
    container_name: user-management-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: /api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - frontend-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000",
        ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ===========================================
  # BACKEND - Node.js API
  # ===========================================
  backend:
    build:
      context: ./user-management-backend
      dockerfile: Dockerfile
    container_name: user-management-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-change-this-password}@mongodb:27017/user-management?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_ACCESS_SECRET: ${JWT_SECRET:-your-super-secret-jwt-access-key-minimum-32-characters-long-change-me}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-jwt-refresh-key-minimum-32-characters-long-change-me}
      JWT_ACCESS_EXPIRY: ${JWT_ACCESS_EXPIRY:-15m}
      JWT_REFRESH_EXPIRY: ${JWT_REFRESH_EXPIRY:-7d}
      SMTP_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      SMTP_PORT: ${EMAIL_PORT:-587}
      SMTP_USER: ${EMAIL_USER:-test@example.com}
      SMTP_PASSWORD: ${EMAIL_PASSWORD:-change-this-password}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
      ALLOWED_ORIGINS: ${CORS_ORIGIN:-http://localhost}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:5000/health",
        ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ===========================================
  # MONGODB - Database
  # ===========================================
  mongodb:
    image: mongo:7.0
    container_name: user-management-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-change-this-password}
      MONGO_INITDB_DATABASE: user-management
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================
  # REDIS - Cache & Session Store
  # ===========================================
  redis:
    image: redis:7.2-alpine
    container_name: user-management-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

# ===========================================
# NETWORKS - Security isolation
# ===========================================
networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge

# ===========================================
# VOLUMES - Data persistence
# ===========================================
volumes:
  mongodb_data:
  mongodb_config:
  redis_data:
