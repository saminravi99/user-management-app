name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_NAME }}.azurecr.io

jobs:
  # Job 1: Run Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.SUBMODULES_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: user-management-backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./user-management-backend
        run: npm ci

      - name: Run backend linting
        working-directory: ./user-management-backend
        run: npm run lint || true

      - name: Run backend tests
        working-directory: ./user-management-backend
        run: npm test || echo "No tests configured yet"

  # Job 2: Build Frontend
  frontend-build:
    name: Frontend Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.SUBMODULES_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: user-management-frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./user-management-frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./user-management-frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: /api

  # Job 3: Build and Push Docker Images (only on main/master branch)
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout code (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.SUBMODULES_TOKEN }}

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push backend image
        working-directory: ./user-management-backend
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }} \
                       -t ${{ env.ACR_LOGIN_SERVER }}/backend:latest .
          docker push ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/backend:latest

      - name: Build and push frontend image
        working-directory: ./user-management-frontend
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }} \
                       -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest .
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Build and push nginx image
        working-directory: ./nginx
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/nginx:${{ github.sha }} \
                       -t ${{ env.ACR_LOGIN_SERVER }}/nginx:latest .
          docker push ${{ env.ACR_LOGIN_SERVER }}/nginx:${{ github.sha }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/nginx:latest

  # Job 4: Deploy to Azure VM
  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout code (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.SUBMODULES_TOKEN }}
      - name: Sync and init submodules
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VM
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USERNAME }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $VM_USER@$VM_HOST << 'ENDSSH'
            set -e
            
            echo "🚀 Starting deployment..."
            cd ~/app
            
            echo "📥 Logging into ACR..."
            az login --identity
            az acr login --name ${{ secrets.ACR_NAME }}
            
            echo "📦 Pulling latest images..."
            docker-compose pull
            
            echo "🔄 Stopping old containers..."
            docker-compose down
            
            echo "🚀 Starting new containers..."
            docker-compose up -d
            
            echo "⏳ Waiting for containers to be healthy..."
            sleep 30
            
            echo "✅ Checking container status..."
            docker-compose ps
            
            echo "🏥 Testing health endpoint..."
            curl -f http://localhost/health || echo "Health check pending..."
            
            echo "🎉 Deployment completed successfully!"
          ENDSSH

      - name: Verify Deployment
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USERNAME }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $VM_USER@$VM_HOST << 'ENDSSH'
            cd ~/app
            
            # Check if all containers are running
            CONTAINERS=$(docker-compose ps -q | wc -l)
            RUNNING=$(docker-compose ps | grep -c "Up" || true)
            
            echo "Containers running: $RUNNING / $CONTAINERS"
            
            if [ "$RUNNING" -eq "$CONTAINERS" ]; then
              echo "✅ All containers are running!"
              exit 0
            else
              echo "❌ Some containers are not running!"
              docker-compose ps
              exit 1
            fi
          ENDSSH

      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/deploy_key

  # Job 5: Send Notification (Optional)
  notify:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-build, build-and-push, deploy]
    if: always()

    steps:
      - name: Deployment Status
        run: |
          echo "Backend tests: ${{ needs.backend-tests.result }}"
          echo "Frontend build: ${{ needs.frontend-build.result }}"
          echo "Build & Push: ${{ needs.build-and-push.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
          if [ "${{ needs.backend-tests.result }}" != "success" ] || [ "${{ needs.frontend-build.result }}" != "success" ]; then
            echo "❌ CI checks failed; skipping notification of success."
            exit 1
          fi
          if [ "${{ needs.build-and-push.result }}" == "skipped" ] || [ "${{ needs.deploy.result }}" == "skipped" ]; then
            echo "ℹ️ Build/Deploy skipped (likely PR or non-main branch)."
            exit 0
          fi
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "🌐 Application URL: http://${{ secrets.VM_HOST }}"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
